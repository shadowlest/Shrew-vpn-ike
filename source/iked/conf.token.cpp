#line 2 "/home/luizfelipe/ike/source/iked/conf.token.cpp"

#line 4 "/home/luizfelipe/ike/source/iked/conf.token.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 146
#define YY_END_OF_BUFFER 147
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[713] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  147,  145,
      136,  138,  145,  137,  142,  144,  141,  139,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
        2,   20,   22,   23,  142,  142,  142,  142,  142,  142,
      142,   25,   37,  142,  142,  142,  142,   39,   47,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,   49,   99,  142,  142,  100,
      103,  141,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  104,  135,  136,  138,    0,  140,  137,

      142,  144,    0,  141,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,   80,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  106,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  143,  142,  142,  142,  142,

      142,  142,  142,  142,  142,    4,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,   27,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,   79,  142,  142,
      142,  142,   60,  142,  142,  142,  142,  142,  142,  142,
      142,  121,  142,  142,  142,  142,  142,  142,  125,  142,
      107,  142,  142,  142,  142,  142,  142,  142,  132,  126,
      142,  142,  142,  142,   48,  142,  142,  142,  142,  142,

      142,    9,  142,   11,    5,    7,  142,  142,  142,  142,
      142,   28,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,   81,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,   74,
      142,  142,  142,   93,  142,  142,   54,  142,   84,  142,
       82,  142,  142,   90,   91,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  123,  109,  142,  124,  115,  120,
      142,  119,  117,  118,  142,  142,  142,  116,  142,  142,
      127,  142,  142,  142,  142,  142,   10,  142,  142,    8,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,   41,   42,  142,  142,  142,
      142,  142,  142,   85,  142,  142,  142,  142,  142,  142,
      142,   59,  142,   87,  142,   58,  142,  142,   76,  142,
       71,  142,  142,  142,  142,  142,  142,  142,  142,   75,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,    1,  142,  142,  142,   12,  142,  142,  142,
      142,  142,  142,    3,    6,  142,  142,  142,  142,  142,
      142,   30,  142,  142,   45,  142,  142,  142,  142,  142,
      142,   77,  142,   96,   95,  142,  142,  142,  142,  142,
       56,  142,  142,  142,  142,  142,  142,  142,   70,  142,

      142,  142,   72,  142,   86,   92,  142,  142,  142,  142,
      142,  142,  142,  108,  105,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,   32,   33,   31,   29,   26,  142,
      142,  142,  142,   73,  142,  142,   50,   57,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  102,  101,  142,  131,  142,  142,
      142,  142,  142,  142,  142,   21,  142,  142,  142,   14,
      142,  142,  142,  142,  142,  142,  142,  142,   44,  142,
       40,  142,  142,   78,  142,   63,  142,   53,  142,  142,

      142,  142,  142,  142,  142,  142,   98,  142,  142,  142,
      122,  142,  134,  133,  142,  142,  142,  128,  129,  130,
      142,  142,   15,   13,  142,  142,  142,  142,  142,  142,
       34,  142,   46,  142,   64,   65,  142,  142,   51,  142,
       61,   62,   97,   94,   52,  142,  142,  142,  142,  142,
      142,   24,  142,  142,  142,  142,  142,   35,  142,   43,
       55,  142,  142,  142,  142,   83,  142,  142,  142,  114,
      113,  142,   38,  142,  142,   19,   18,   36,  142,  142,
      142,  142,  142,  142,  142,  142,   16,   17,  142,  142,
      142,  142,   88,   89,  142,  142,   68,   69,   66,   67,

      142,  142,  142,  142,  142,  142,  142,  142,  110,  112,
      111,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,    9,   16,    9,    1,   17,    1,
        1,    1,    1,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    1,    1,    1,   18,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,    6,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,    1,   45,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[46] =
    {   0,
        1,    1,    2,    1,    1,    3,    4,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1
    } ;

static const flex_int16_t yy_base[719] =
    {   0,
        0,   45,    0,    1,   69,    0,   19,   21,   96,    0,
       49,   64,  123,    0,   76,   83,  157,    0,  764,  765,
      761,  759,  757,    0,    0,  752,  196,  765,  740,  735,
      734,    0,    1,  721,    7,  723,    7,  733,  730,   35,
      765,  765,  765,  765,  715,    1,  724,  719,  711,  713,
      724,  765,  765,  727,  714,   17,  720,  765,  765,  100,
       49,   52,   42,  128,  712,  719,   85,  722,  721,  719,
      190,    6,   33,  714,   55,  765,  765,  696,  705,  765,
      765,  713,  191,  705,  138,  100,  697,  152,   97,  703,
      145,  151,  705,  765,  765,  728,  726,  724,  765,    0,

        0,  719,    0,    0,  703,  688,  701,  685,  690,  128,
      700,  685,  696,  694,   63,  680,  685,  696,  677,  692,
      676,  674,  674,  678,  672,  688,  686,  676,  669,  672,
      666,  670,  663,  663,  676,  672,  665,  658,    0,  659,
      674,  144,  656,  669,  671,  670,  110,  653,  665,  667,
      658,  642,  664,  658,  660,  653,  642,  655,  654,  653,
      654,  642,  645,    7,  107,  651,  636,  634,  635,  630,
      635,  645,  644,  641,  627,    0,  625,  629,  624,  626,
      628,  191,  632,  623,  619,  635,  633,  631,  632,  627,
      625,  612,  633,  609,  626,    0,  614,  618,  607,  604,

      609,  601,  606,  604,  604,    0,  603,  616,  611,  595,
      608,  597,  594,  600,  598,  591,  602,  602,  604,  602,
      584,    0,  584,  588,  163,  582,  577,  598,  580,  579,
      603,  586,  574,  583,  576,   87,  589,  589,  582,  585,
      583,  577,  581,  570,  575,  562,  571,  564,  573,  576,
      563,  556,  550,  556,  548,  547,  555,    0,  558,  560,
      553,  551,    0,  556,  545,  559,  543,  548,  549,  548,
      540,    0,  549,  534,  536,  546,  538,  541,    0,  534,
        0,  542,  546,  531,  533,  536,  532,  539,    0,    0,
      523,  180,  528,  524,    0,  532,  533,  531,  533,  536,

      518,    0,  168,    0,    0,    0,  534,  509,  527,  517,
      530,    0,  529,  526,  516,  509,  516,  519,  187,  528,
      527,  507,  513,  514,  513,  513,  512,    0,  503,  513,
      504,  511,  509,  200,  491,  498,  489,  506,  501,    0,
      505,  495,  499,    0,  502,  490,    0,  500,    0,  490,
        0,  498,  483,    0,    0,  477,  481,  491,  488,  479,
      483,  484,  469,  468,    0,    0,  481,    0,    0,    0,
      485,    0,    0,    0,  476,  472,  471,    0,  482,  480,
        0,  480,  466,  464,  477,  476,    0,  470,  468,    0,
      464,  467,  173,  471,  451,  462,  206,  199,  457,  462,

      461,  451,  447,  454,  442,    0,    0,  444,  443,  441,
      440,  444,  455,    0,  436,  447,  450,  441,  446,  436,
      444,    0,  443,    0,  434,    0,  197,  445,    0,  442,
        0,  203,  440,  210,  425,  437,  428,  421,  427,    0,
      438,  437,  432,  431,  425,  414,  428,  416,  415,  206,
      418,  234,    0,  408,  416,  415,    0,  416,  413,  402,
      417,  408,  228,    0,    0,  403,  414,  400,  404,  394,
      410,    0,  409,  400,    0,  394,  405,  400,  395,  390,
      389,    0,  387,    0,    0,  386,  399,  392,  398,  382,
        0,  393,  381,  388,  378,  388,  381,  393,    0,  384,

      378,  390,    0,  386,    0,    0,  371,  370,  382,  381,
      367,  379,  383,    0,    0,  380,  376,  380,  383,  380,
      385,  361,  371,  360,  362,  367,  366,  367,  366,  354,
      362,  352,  353,  359,    0,    0,    0,    0,    0,  344,
      356,  366,  340,    0,  350,  357,    0,    0,  356,  351,
      338,  349,  338,  347,  337,  345,  345,  329,  329,  342,
      334,  339,  329,  328,    0,    0,  333,    0,  317,  321,
      335,  218,  340,  341,  342,    0,  333,  330,  327,    0,
      320,  313,  312,  308,  316,  306,  323,  307,    0,  314,
        0,  307,  300,    0,  296,    0,  295,    0,  318,  317,

      299,  312,  309,  308,  293,  306,    0,  293,  289,  288,
        0,  306,    0,    0,  288,  287,  303,    0,    0,    0,
      288,  301,    0,    0,  277,  276,  286,  297,  282,  291,
        0,  272,    0,  289,    0,    0,  207,  211,    0,  283,
        0,    0,    0,    0,    0,  275,  274,  270,  279,  287,
      267,    0,  275,  270,  269,  264,  258,    0,  264,    0,
        0,  266,  270,  264,  268,    0,  273,  272,  255,    0,
        0,  254,    0,  253,  252,    0,    0,    0,  266,  244,
      264,  242,  261,  260,  256,  255,    0,    0,  257,  253,
      248,  235,    0,    0,  239,  238,    0,    0,    0,    0,

      220,  165,  218,  216,  130,  120,   23,    6,    0,    0,
        0,  765,  259,  264,  269,  272,  274,    1
    } ;

static const flex_int16_t yy_def[719] =
    {   0,
      713,  713,    2,    2,    2,    5,    2,    2,    2,    9,
        2,    2,    2,   13,    2,    2,    2,   17,  712,  712,
      712,  712,  714,  715,  716,  717,  716,  712,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      712,  712,  712,  712,  716,  716,  716,  716,  716,  716,
      716,  712,  712,  716,  716,  716,  716,  712,  712,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  712,  712,  716,  716,  712,
      712,   27,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  712,  712,  712,  712,  714,  712,  715,

      716,  717,  718,   27,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  718,  716,  716,  716,  716,

      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,

      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,

      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,

      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,

      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,

      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,    0,  712,  712,  712,  712,  712,  712
    } ;

static const flex_int16_t yy_nxt[811] =
    {   0,
       20,   21,   22,   23,   24,  196,   26,   20,   27,   27,
       27,   27,   27,   27,   27,   27,   28,  712,  108,  123,
      109,   29,   29,  110,  711,  116,  111,  124,  165,  166,
       30,   30,   31,   31,  113,  259,  132,  114,  117,  133,
       32,   32,  260,   20,   20,   20,   21,   22,   23,   24,
      710,   26,   20,   27,   27,   27,   27,   27,   27,   27,
       27,   28,   43,   44,   43,   44,  120,  139,   54,  167,
       55,  140,  146,  170,  168,  171,  121,  141,  143,   56,
      142,   57,  147,   54,  144,   55,  145,  208,   20,   20,
       33,   34,   58,   59,   56,   35,   57,   36,   78,   37,

      209,   38,   79,   39,   40,   78,  153,   58,   59,   79,
      331,  154,   41,   42,   45,   46,  155,   47,   48,   80,
       81,  135,  182,  332,  136,  183,   80,   81,  241,  188,
      242,   49,  189,   50,   51,  137,  261,  138,  709,   52,
       53,   60,  262,   61,   62,   63,   64,  202,  203,   65,
       66,   67,   68,   69,   70,   71,  179,   72,   73,  148,
       74,  149,  150,   75,  180,  708,   76,   77,   82,  181,
      185,  191,  193,  235,  236,   83,   84,   85,   86,   87,
      319,  186,   88,   89,   90,   91,   92,  192,  194,  381,
      382,  391,   93,  187,  461,  462,  392,  704,  320,  705,

       94,   95,  102,  103,  104,  104,  104,  104,  104,  104,
      104,  104,  159,  175,  278,  404,  176,  160,  161,  493,
      469,  419,  405,  494,  162,  163,  279,  164,  177,  420,
      466,  470,  497,  516,  421,  467,  662,  498,  500,  501,
      664,  517,  663,  468,  519,  520,  665,  521,  530,  531,
      615,  707,  616,  706,  703,  702,  701,  700,  617,   25,
       25,   25,   25,   25,   98,   98,   98,   98,   98,  100,
      699,  100,  100,  100,  101,  698,  101,  102,  102,  697,
      696,  695,  694,  693,  692,  691,  690,  689,  688,  687,
      686,  685,  684,  683,  682,  681,  680,  679,  678,  677,

      676,  675,  674,  673,  672,  671,  670,  669,  668,  667,
      666,  661,  660,  659,  658,  657,  656,  655,  654,  653,
      652,  651,  650,  649,  648,  647,  646,  645,  644,  643,
      642,  641,  640,  639,  638,  637,  636,  635,  634,  633,
      632,  631,  630,  629,  628,  627,  626,  625,  624,  623,
      622,  621,  620,  619,  618,  614,  613,  612,  611,  610,
      609,  608,  607,  606,  605,  604,  603,  602,  601,  600,
      599,  598,  597,  596,  595,  594,  593,  592,  591,  590,
      589,  588,  587,  586,  585,  584,  583,  582,  581,  580,
      579,  578,  577,  576,  575,  574,  573,  572,  571,  570,

      569,  568,  567,  566,  565,  564,  563,  562,  561,  560,
      559,  558,  557,  556,  555,  554,  553,  552,  551,  550,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  540,
      539,  538,  537,  536,  535,  534,  533,  532,  529,  528,
      527,  526,  525,  524,  523,  522,  518,  515,  514,  513,
      512,  511,  510,  509,  508,  507,  506,  505,  504,  503,
      502,  499,  496,  495,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  465,  464,  463,  460,
      459,  458,  457,  456,  455,  454,  453,  452,  451,  450,

      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  428,  427,  426,  425,  424,  423,  422,  418,  417,
      416,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  390,  389,  388,  387,  386,  385,  384,  383,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,

      340,  339,  338,  337,  336,  335,  334,  333,  330,  329,
      328,  327,  326,  325,  324,  323,  322,  321,  318,  317,
      316,  315,  314,  313,  312,  311,  310,  309,  308,  307,
      306,  305,  304,  303,  302,  301,  300,  299,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  277,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  267,  266,  265,
      264,  263,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  249,  248,  247,  246,  245,  244,  243,  240,  239,
      238,  237,  234,  233,  232,  231,  230,  229,  228,  227,

      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  207,  206,  205,
      204,  201,  200,  199,  198,  197,  103,   99,   97,   96,
      195,  190,  184,  178,  174,  173,  172,  169,  158,  157,
      156,  152,  151,  134,  131,  130,  129,  128,  127,  126,
      125,  122,  119,  118,  115,  112,  107,  106,  105,  103,
       99,   97,   96,  712,   19,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  712
    } ;

static const flex_int16_t yy_chk[811] =
    {   0,
        1,    1,    1,    1,    1,  718,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    0,   32,   46,
       32,    3,    4,   33,  708,   37,   33,   46,   72,   72,
        3,    4,    3,    4,   35,  164,   56,   35,   37,   56,
        3,    4,  164,    1,    1,    2,    2,    2,    2,    2,
      707,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    7,    7,    8,    8,   40,   61,   11,   73,
       11,   61,   63,   75,   73,   75,   40,   61,   62,   11,
       61,   11,   63,   12,   62,   12,   62,  115,    2,    2,
        5,    5,   11,   11,   12,    5,   12,    5,   15,    5,

      115,    5,   15,    5,    5,   16,   67,   12,   12,   16,
      236,   67,    5,    5,    9,    9,   67,    9,    9,   15,
       15,   60,   86,  236,   60,   86,   16,   16,  147,   89,
      147,    9,   89,    9,    9,   60,  165,   60,  706,    9,
        9,   13,  165,   13,   13,   13,   13,  110,  110,   13,
       13,   13,   13,   13,   13,   13,   85,   13,   13,   64,
       13,   64,   64,   13,   85,  705,   13,   13,   17,   85,
       88,   91,   92,  142,  142,   17,   17,   17,   17,   17,
      225,   88,   17,   17,   17,   17,   17,   91,   92,  292,
      292,  303,   17,   88,  393,  393,  303,  702,  225,  702,

       17,   17,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   71,   83,  182,  319,   83,   71,   71,  427,
      398,  334,  319,  427,   71,   71,  182,   71,   83,  334,
      397,  398,  432,  450,  334,  397,  637,  432,  434,  434,
      638,  450,  637,  397,  452,  452,  638,  452,  463,  463,
      572,  704,  572,  703,  701,  696,  695,  692,  572,  713,
      713,  713,  713,  713,  714,  714,  714,  714,  714,  715,
      691,  715,  715,  715,  716,  690,  716,  717,  717,  689,
      686,  685,  684,  683,  682,  681,  680,  679,  675,  674,
      672,  669,  668,  667,  665,  664,  663,  662,  659,  657,

      656,  655,  654,  653,  651,  650,  649,  648,  647,  646,
      640,  634,  632,  630,  629,  628,  627,  626,  625,  622,
      621,  617,  616,  615,  612,  610,  609,  608,  606,  605,
      604,  603,  602,  601,  600,  599,  597,  595,  593,  592,
      590,  588,  587,  586,  585,  584,  583,  582,  581,  579,
      578,  577,  575,  574,  573,  571,  570,  569,  567,  564,
      563,  562,  561,  560,  559,  558,  557,  556,  555,  554,
      553,  552,  551,  550,  549,  546,  545,  543,  542,  541,
      540,  534,  533,  532,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  516,

      513,  512,  511,  510,  509,  508,  507,  504,  502,  501,
      500,  498,  497,  496,  495,  494,  493,  492,  490,  489,
      488,  487,  486,  483,  481,  480,  479,  478,  477,  476,
      474,  473,  471,  470,  469,  468,  467,  466,  462,  461,
      460,  459,  458,  456,  455,  454,  451,  449,  448,  447,
      446,  445,  444,  443,  442,  441,  439,  438,  437,  436,
      435,  433,  430,  428,  425,  423,  421,  420,  419,  418,
      417,  416,  415,  413,  412,  411,  410,  409,  408,  405,
      404,  403,  402,  401,  400,  399,  396,  395,  394,  392,
      391,  389,  388,  386,  385,  384,  383,  382,  380,  379,

      377,  376,  375,  371,  367,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  353,  352,  350,  348,  346,  345,
      343,  342,  341,  339,  338,  337,  336,  335,  333,  332,
      331,  330,  329,  327,  326,  325,  324,  323,  322,  321,
      320,  318,  317,  316,  315,  314,  313,  311,  310,  309,
      308,  307,  301,  300,  299,  298,  297,  296,  294,  293,
      291,  288,  287,  286,  285,  284,  283,  282,  280,  278,
      277,  276,  275,  274,  273,  271,  270,  269,  268,  267,
      266,  265,  264,  262,  261,  260,  259,  257,  256,  255,
      254,  253,  252,  251,  250,  249,  248,  247,  246,  245,

      244,  243,  242,  241,  240,  239,  238,  237,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  226,  224,  223,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,
      211,  210,  209,  208,  207,  205,  204,  203,  202,  201,
      200,  199,  198,  197,  195,  194,  193,  192,  191,  190,
      189,  188,  187,  186,  185,  184,  183,  181,  180,  179,
      178,  177,  175,  174,  173,  172,  171,  170,  169,  168,
      167,  166,  163,  162,  161,  160,  159,  158,  157,  156,
      155,  154,  153,  152,  151,  150,  149,  148,  146,  145,
      144,  143,  141,  140,  138,  137,  136,  135,  134,  133,

      132,  131,  130,  129,  128,  127,  126,  125,  124,  123,
      122,  121,  120,  119,  118,  117,  116,  114,  113,  112,
      111,  109,  108,  107,  106,  105,  102,   98,   97,   96,
       93,   90,   87,   84,   82,   79,   78,   74,   70,   69,
       68,   66,   65,   57,   55,   54,   51,   50,   49,   48,
       47,   45,   39,   38,   36,   34,   31,   30,   29,   26,
       23,   22,   21,   19,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  712
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[146] =
    {   0,
      122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
      132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
      143,  144,  145,  147,  148,  149,  150,  151,  152,  153,
      154,  155,  156,  157,  158,  159,  160,  162,  163,  164,
      165,  166,  167,  168,  169,  170,  171,  173,  174,  175,
      176,  177,  178,  179,  180,  181,  182,  183,  184,  185,
      186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
      196,  197,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
      216,  217,  218,  219,  220,  221,  222,  223,  224,  226,

      227,  228,  229,  231,  232,  233,  234,  235,  236,  237,
      238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
      248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
      258,  259,  260,  261,  262,  264,  265,  266,  267,  269,
      282,  289,  298,  307,  320
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/luizfelipe/ike/source/iked/conf.token.ll"
/*
 * Copyright (c) 2007
 *      Shrew Soft Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Redistributions in any form must be accompanied by information on
 *    how to obtain complete source code for the software and any
 *    accompanying software that uses the software.  The source code
 *    must either be included in the distribution or be available for no
 *    more than the cost of distribution plus a nominal fee, and must be
 *    freely redistributable under reasonable conditions.  For an
 *    executable file, complete source code means the source code for all
 *    modules it contains.  It does not include source code for modules or
 *    files that typically accompany the major components of the operating
 *    system on which the executable file runs.
 *
 * THIS SOFTWARE IS PROVIDED BY SHREW SOFT INC ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
 * NON-INFRINGEMENT, ARE DISCLAIMED.  IN NO EVENT SHALL SHREW SOFT INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 * AUTHOR : Matthew Grooms
 *          mgrooms@shrew.net
 *
 */
#line 43 "/home/luizfelipe/ike/source/iked/conf.token.ll"

#include <cstdlib>
#include <errno.h>
#include <limits.h>
#include <string>
#include "iked.h"
#include "conf.parse.hpp"

#define YY_DECL                                     \
    yy::conf_parser::token_type                     \
    yylex( yy::conf_parser::semantic_type * yylval, \
    yy::conf_parser::location_type * yylloc,        \
    IKED & iked )

YY_DECL;


#define yyterminate() return token::END

int yy_first_time = 1;

#line 1019 "/home/luizfelipe/ike/source/iked/conf.token.cpp"
/*
 * TYPES
 *
 */
/*
 * SECTIONS
 *
 */

#line 100 "/home/luizfelipe/ike/source/iked/conf.token.ll"
#define YY_USER_ACTION  yylloc->columns( yyleng );
#line 1031 "/home/luizfelipe/ike/source/iked/conf.token.cpp"
#line 1032 "/home/luizfelipe/ike/source/iked/conf.token.cpp"

#define INITIAL 0
#define SEC_ROOT 1
#define SEC_DAEMON 2
#define SEC_NETGROUP 3
#define SEC_XA_LDAP 4
#define SEC_XC_LOCAL 5
#define SEC_PEER 6
#define SEC_PLCY 7
#define SEC_PROP 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 103 "/home/luizfelipe/ike/source/iked/conf.token.ll"



#line 107 "/home/luizfelipe/ike/source/iked/conf.token.ll"
	yylloc->step();




typedef yy::conf_parser::token token;

if( yy_first_time )
{
	BEGIN SEC_ROOT;
	yy_first_time = 0;
}



#line 1338 "/home/luizfelipe/ike/source/iked/conf.token.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 713 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 712 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 146 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 146 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 147 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 122 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_DAEMON; return( token::DAEMON ); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 123 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::BCB ); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 124 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::SOCK ); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 125 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::IKE ); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 126 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::NATT ); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 127 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::SYSLOG ); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 128 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LL_NONE ); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 129 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LL_ERROR ); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 130 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LL_INFO ); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 131 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LL_DEBUG ); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 132 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LL_LOUD ); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 133 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LL_DECODE ); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 134 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LOG_LEVEL ); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 135 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LOG_FILE ); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 136 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::DHCP_FILE ); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 137 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::PCAP_DECRYPT ); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 138 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::PCAP_ENCRYPT ); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 139 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::RETRY_DELAY ); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 140 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::RETRY_COUNT ); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 141 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_ROOT; return( token::ECB ); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 143 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_NETGROUP; return( token::NETGROUP ); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 144 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::BCB ); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 145 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_ROOT; return( token::ECB ); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 147 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_XA_LDAP; return( token::XAUTH_LDAP ); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 148 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::BCB ); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 149 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LD_VERSION ); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 150 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LD_URL ); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 151 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LD_BASE ); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 152 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LD_SUBTREE ); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 153 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ENABLE ); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 154 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::DISABLE ); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 155 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LD_BIND_DN ); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 156 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LD_BIND_PW ); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 157 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LD_ATTR_USER ); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 158 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LD_ATTR_GROUP ); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 159 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LD_ATTR_MEMBER ); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 160 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_ROOT; return( token::ECB ); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 162 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_XC_LOCAL; return( token::XCONF_LOCAL ); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 163 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::BCB ); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 164 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::NETWORK4 ); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 165 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::DNSS4 ); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 166 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::NBNS4 ); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 167 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::DNS_SUFFIX ); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 168 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::DNS_LIST ); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 169 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::BANNER ); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 170 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::PFS_GROUP ); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 171 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_ROOT; return( token::ECB ); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 173 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_PEER; return( token::PEER ); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 174 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::BCB ); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 175 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::CONTACT ); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 176 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::INITIATOR ); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 177 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::RESPONDER ); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 178 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::EXCHANGE ); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 179 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::MAIN ); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 180 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::AGGRESSIVE ); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 181 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ENABLE ); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 182 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::DISABLE ); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 183 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::FORCE ); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 184 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::DRAFT ); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 185 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::RFC ); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 186 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::NATT_MODE ); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 187 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::NATT_RATE ); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 188 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::DPD_MODE ); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 189 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::DPD_DELAY ); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 190 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::DPD_RETRY ); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 191 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::FRAG_IKE_MODE ); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 192 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::FRAG_IKE_SIZE ); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 193 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::FRAG_ESP_MODE ); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 194 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::FRAG_ESP_SIZE ); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 195 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::PEERID ); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 196 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LOCAL ); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 197 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::REMOTE ); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 198 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ADDR ); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 199 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::FQDN ); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 200 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::UFQDN ); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 201 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::KEYID ); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 202 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ASN1DN ); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 203 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::AUTHDATA ); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 204 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::PSK ); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 205 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::CA ); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 206 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::CERT ); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 207 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::PKEY ); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 208 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LIFE_CHECK ); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 209 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::OBEY ); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 210 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::CLAIM ); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 211 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::STRICT ); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 212 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::EXACT ); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 213 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::XAUTH_SOURCE ); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 214 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::XCONF_SOURCE ); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 215 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::PULL ); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 216 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::PUSH ); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 217 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LOCAL ); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 218 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LDAP ); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 219 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::PLCY_MODE ); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 220 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::CONFIG ); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 221 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::COMPAT ); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 222 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_PLCY; return( token::PLCY_LIST ); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 223 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_PROP; return( token::PROPOSAL ); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 224 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_ROOT; return( token::ECB ); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 226 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::BCB ); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 227 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::INCLUDE ); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 228 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::EXCLUDE ); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 229 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_PEER; return( token::ECB ); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 231 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::BCB ); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 232 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ISAKMP ); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 233 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::AH ); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 234 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ESP ); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 235 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::IPCOMP ); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 236 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::AUTH ); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 237 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::HYB_XA_RSA ); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 238 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::MUT_XA_RSA ); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 239 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::MUT_XA_PSK ); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 240 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::MUT_RSA ); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 241 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::MUT_PSK ); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 242 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::CIPH ); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 243 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::KLEN ); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 244 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::HASH ); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 245 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::MSGA ); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 246 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::DHGR ); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 247 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::COMP ); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 248 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ALG_AES ); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 249 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ALG_BLOWFISH ); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 250 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ALG_3DES ); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 251 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ALG_CAST ); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 252 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ALG_DES ); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 253 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ALG_MD5 ); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 254 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ALG_SHA1 ); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 255 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ALG_SHA2_256 ); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 256 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ALG_SHA2_384 ); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 257 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ALG_SHA2_512 ); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 258 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ALG_DEFLATE ); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 259 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::ALG_LZS ); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 260 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LIFE_SEC ); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 261 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ return( token::LIFE_KBS ); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 262 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{ BEGIN SEC_PEER; return( token::ECB ); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 264 "/home/luizfelipe/ike/source/iked/conf.token.ll"
;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 265 "/home/luizfelipe/ike/source/iked/conf.token.ll"
;
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 266 "/home/luizfelipe/ike/source/iked/conf.token.ll"
yylloc->lines( yyleng );
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 267 "/home/luizfelipe/ike/source/iked/conf.token.ll"
return( token::EOS );
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 269 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{

	int len = strlen( yytext );
	if( len < 3 )
		return token::SEQ;

	yylval->bval = new BDATA;
	yylval->bval->set( yytext + 1, len - 2 );
	yylval->bval->add( 0, 1 );

	return token::QUOTED;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 282 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{

	yylval->ival = strtol( yytext, NULL, 10 );

	return token::NUMBER;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 289 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{

	yylval->bval = new BDATA;
	yylval->bval->set( yytext, strlen( yytext ) );
	yylval->bval->add( 0, 1 );

	return token::LABEL;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 298 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{

	yylval->bval = new BDATA;
	yylval->bval->set( yytext, strlen( yytext ) );
	yylval->bval->add( 0, 1 );

	return token::NETWORK;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 307 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{

	yylval->bval = new BDATA;
	yylval->bval->set( yytext, strlen( yytext ) );
	yylval->bval->add( 0, 1 );

	return token::ADDRESS;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SEC_ROOT):
case YY_STATE_EOF(SEC_DAEMON):
case YY_STATE_EOF(SEC_NETGROUP):
case YY_STATE_EOF(SEC_XA_LDAP):
case YY_STATE_EOF(SEC_XC_LOCAL):
case YY_STATE_EOF(SEC_PEER):
case YY_STATE_EOF(SEC_PLCY):
case YY_STATE_EOF(SEC_PROP):
#line 316 "/home/luizfelipe/ike/source/iked/conf.token.ll"
{
	yyterminate();
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 320 "/home/luizfelipe/ike/source/iked/conf.token.ll"
return token::SEQ;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 322 "/home/luizfelipe/ike/source/iked/conf.token.ll"
ECHO;
	YY_BREAK
#line 2197 "/home/luizfelipe/ike/source/iked/conf.token.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 713 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 713 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 712);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 322 "/home/luizfelipe/ike/source/iked/conf.token.ll"


/*
 * PROGRAM
 *
 */

bool _IKED::conf_load( const char * path, bool trace )
{
	//
	// set some defaults
	//

	level = LOG_DEBUG;

	if( path_conf[ 0 ] == 0 )
		snprintf( path_conf, MAX_PATH, "%s/iked.conf", path );

	if( path_log[ 0 ] == 0 )
		snprintf( path_log, MAX_PATH, "%s/iked.log", PATH_DEBUG );

	snprintf( path_dhcp, MAX_PATH, "%s/iked.dhcp", path );

	//
	// open file and run parser
	//
	
	yy_flex_debug = trace;
	if( !( yyin = fopen( path_conf, "r" ) ) )
	{
		log.txt( LLOG_ERROR, "!! : unable to open %s\n", path_conf );
		return false;
	}

	log.txt( LOG_INFO, "ii : reading config %s\n", path_conf );

	yy::conf_parser parser( *this );
	parser.set_debug_level( trace );

	parser.parse();
 
	fclose( yyin );

	return !conf_fail;
}

